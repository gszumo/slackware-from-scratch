    [PATCH v2] x86/entry: build thunk_$(BITS) only if CONFIG_PREEMPTION=y

    ----------------------------------------------------------------------

    * To: Andy Lutomirski <luto@xxxxxxxxxx>, Thomas Gleixner
      <tglx@xxxxxxxxxxxxx>, Ingo Molnar <mingo@xxxxxxxxxx>, Borislav Petkov
      <bp@xxxxxxxxx>
    * Subject: [PATCH v2] x86/entry: build thunk_$(BITS) only if
      CONFIG_PREEMPTION=y
    * From: Andrea Righi <andrea.righi@xxxxxxxxxxxxx>
    * Date: Sat, 23 Jan 2021 12:30:45 +0100
    * Cc: "H. Peter Anvin" <hpa@xxxxxxxxx>, x86@xxxxxxxxxx,
      linux-kernel@xxxxxxxxxxxxxxx

    ----------------------------------------------------------------------

With CONFIG_PREEMPTION disabled, arch/x86/entry/thunk_64.o is just an
empty object file.

With the newer binutils (tested with 2.35.90.20210113-1ubuntu1) the GNU
assembler doesn't generate a symbol table for empty object files and
objtool fails with the following error when a valid symbol table cannot
be found:

  arch/x86/entry/thunk_64.o: warning: objtool: missing symbol table

To prevent this from happening, build thunk_$(BITS).o only if
CONFIG_PREEMPTION is enabled.

BugLink: https://bugs.launchpad.net/bugs/1911359
Fixes: 320100a5ffe5 ("x86/entry: Remove the TRACE_IRQS cruft")
Signed-off-by: Andrea Righi <andrea.righi@xxxxxxxxxxxxx>
---
 arch/x86/entry/Makefile   | 3 ++-
 arch/x86/entry/thunk_32.S | 2 --
 arch/x86/entry/thunk_64.S | 4 ----
 arch/x86/um/Makefile      | 3 ++-
 4 files changed, 4 insertions(+), 8 deletions(-)

ChangeLog (v1 -> v2):
 - do not break UML build

--- ./arch/x86/um/Makefile.orig	2021-01-23 09:04:06.000000000 -0600
+++ ./arch/x86/um/Makefile	2021-01-25 15:18:41.591052269 -0600
@@ -27,7 +27,8 @@
 
 obj-y += syscalls_64.o vdso/
 
-subarch-y = ../lib/csum-partial_64.o ../lib/memcpy_64.o ../entry/thunk_64.o
+subarch-y = ../lib/csum-partial_64.o ../lib/memcpy_64.o
+subarch-$(CONFIG_PREEMPTION) += ../entry/thunk_64.o
 
 endif
 
--- ./arch/x86/entry/thunk_32.S.orig	2021-01-23 09:04:06.000000000 -0600
+++ ./arch/x86/entry/thunk_32.S	2021-01-25 15:18:41.591052269 -0600
@@ -29,10 +29,8 @@
 SYM_CODE_END(\name)
 	.endm
 
-#ifdef CONFIG_PREEMPTION
 	THUNK preempt_schedule_thunk, preempt_schedule
 	THUNK preempt_schedule_notrace_thunk, preempt_schedule_notrace
 	EXPORT_SYMBOL(preempt_schedule_thunk)
 	EXPORT_SYMBOL(preempt_schedule_notrace_thunk)
-#endif
 
--- ./arch/x86/entry/thunk_64.S.orig	2021-01-23 09:04:06.000000000 -0600
+++ ./arch/x86/entry/thunk_64.S	2021-01-25 15:18:41.591052269 -0600
@@ -36,14 +36,11 @@
 	_ASM_NOKPROBE(\name)
 	.endm
 
-#ifdef CONFIG_PREEMPTION
 	THUNK preempt_schedule_thunk, preempt_schedule
 	THUNK preempt_schedule_notrace_thunk, preempt_schedule_notrace
 	EXPORT_SYMBOL(preempt_schedule_thunk)
 	EXPORT_SYMBOL(preempt_schedule_notrace_thunk)
-#endif
 
-#ifdef CONFIG_PREEMPTION
 SYM_CODE_START_LOCAL_NOALIGN(.L_restore)
 	popq %r11
 	popq %r10
@@ -58,4 +55,3 @@
 	ret
 	_ASM_NOKPROBE(.L_restore)
 SYM_CODE_END(.L_restore)
-#endif
--- ./arch/x86/entry/Makefile.orig	2021-01-23 09:04:06.000000000 -0600
+++ ./arch/x86/entry/Makefile	2021-01-25 15:18:41.591052269 -0600
@@ -21,12 +21,13 @@
 CFLAGS_syscall_32.o		+= $(call cc-option,-Wno-override-init,)
 CFLAGS_syscall_x32.o		+= $(call cc-option,-Wno-override-init,)
 
-obj-y				:= entry_$(BITS).o thunk_$(BITS).o syscall_$(BITS).o
+obj-y                          := entry_$(BITS).o syscall_$(BITS).o
 obj-y				+= common.o
 
 obj-y				+= vdso/
 obj-y				+= vsyscall/
 
+obj-$(CONFIG_PREEMPTION)       += thunk_$(BITS).o
 obj-$(CONFIG_IA32_EMULATION)	+= entry_64_compat.o syscall_32.o
 obj-$(CONFIG_X86_X32_ABI)	+= syscall_x32.o
 
